// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ed_application.proto

#include "ed_application.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Detector_Open_Request::Detector_Open_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rf_freq_min_(0)
  , rf_freq_max_(0){}
struct Detector_Open_RequestDefaultTypeInternal {
  constexpr Detector_Open_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Detector_Open_RequestDefaultTypeInternal() {}
  union {
    Detector_Open_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Detector_Open_RequestDefaultTypeInternal _Detector_Open_Request_default_instance_;
constexpr Detector_Open_Response::Detector_Open_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serial_number_()
  , _serial_number_cached_byte_size_(0)
  , possible_models_()
  , confidence_()
  , signal_number_(0u)
  , longitude_(0)
  , latitude_(0){}
struct Detector_Open_ResponseDefaultTypeInternal {
  constexpr Detector_Open_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Detector_Open_ResponseDefaultTypeInternal() {}
  union {
    Detector_Open_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Detector_Open_ResponseDefaultTypeInternal _Detector_Open_Response_default_instance_;
constexpr Detector_Close_Request::Detector_Close_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Detector_Close_RequestDefaultTypeInternal {
  constexpr Detector_Close_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Detector_Close_RequestDefaultTypeInternal() {}
  union {
    Detector_Close_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Detector_Close_RequestDefaultTypeInternal _Detector_Close_Request_default_instance_;
constexpr Detector_Close_Response::Detector_Close_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Detector_Close_ResponseDefaultTypeInternal {
  constexpr Detector_Close_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Detector_Close_ResponseDefaultTypeInternal() {}
  union {
    Detector_Close_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Detector_Close_ResponseDefaultTypeInternal _Detector_Close_Response_default_instance_;
constexpr ED_ReconstructTime_Request::ED_ReconstructTime_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ED_ReconstructTime_RequestDefaultTypeInternal {
  constexpr ED_ReconstructTime_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ED_ReconstructTime_RequestDefaultTypeInternal() {}
  union {
    ED_ReconstructTime_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ED_ReconstructTime_RequestDefaultTypeInternal _ED_ReconstructTime_Request_default_instance_;
constexpr ED_ReconstructTime_Response::ED_ReconstructTime_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task1_(0u)
  , task2_(0u)
  , hardwareid_(0u)
  , timelen_(0)
  , param1_(0)
  , param2_(0){}
struct ED_ReconstructTime_ResponseDefaultTypeInternal {
  constexpr ED_ReconstructTime_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ED_ReconstructTime_ResponseDefaultTypeInternal() {}
  union {
    ED_ReconstructTime_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ED_ReconstructTime_ResponseDefaultTypeInternal _ED_ReconstructTime_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ed_5fapplication_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ed_5fapplication_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ed_5fapplication_2eproto = nullptr;

const uint32_t TableStruct_ed_5fapplication_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Detector_Open_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Detector_Open_Request, rf_freq_min_),
  PROTOBUF_FIELD_OFFSET(::Detector_Open_Request, rf_freq_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Detector_Open_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Detector_Open_Response, signal_number_),
  PROTOBUF_FIELD_OFFSET(::Detector_Open_Response, serial_number_),
  PROTOBUF_FIELD_OFFSET(::Detector_Open_Response, possible_models_),
  PROTOBUF_FIELD_OFFSET(::Detector_Open_Response, confidence_),
  PROTOBUF_FIELD_OFFSET(::Detector_Open_Response, longitude_),
  PROTOBUF_FIELD_OFFSET(::Detector_Open_Response, latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Detector_Close_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Detector_Close_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ED_ReconstructTime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ED_ReconstructTime_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ED_ReconstructTime_Response, task1_),
  PROTOBUF_FIELD_OFFSET(::ED_ReconstructTime_Response, task2_),
  PROTOBUF_FIELD_OFFSET(::ED_ReconstructTime_Response, hardwareid_),
  PROTOBUF_FIELD_OFFSET(::ED_ReconstructTime_Response, timelen_),
  PROTOBUF_FIELD_OFFSET(::ED_ReconstructTime_Response, param1_),
  PROTOBUF_FIELD_OFFSET(::ED_ReconstructTime_Response, param2_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Detector_Open_Request)},
  { 8, -1, -1, sizeof(::Detector_Open_Response)},
  { 20, -1, -1, sizeof(::Detector_Close_Request)},
  { 26, -1, -1, sizeof(::Detector_Close_Response)},
  { 32, -1, -1, sizeof(::ED_ReconstructTime_Request)},
  { 38, -1, -1, sizeof(::ED_ReconstructTime_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Detector_Open_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Detector_Open_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Detector_Close_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Detector_Close_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ED_ReconstructTime_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ED_ReconstructTime_Response_default_instance_),
};

const char descriptor_table_protodef_ed_5fapplication_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ed_application.proto\"A\n\025Detector_Open_"
  "Request\022\023\n\013RF_Freq_min\030\002 \001(\002\022\023\n\013RF_Freq_"
  "max\030\003 \001(\002\"\230\001\n\026Detector_Open_Response\022\025\n\r"
  "Signal_number\030\001 \001(\r\022\025\n\rSerial_number\030\002 \003"
  "(\r\022\027\n\017possible_models\030\003 \003(\t\022\022\n\nConfidenc"
  "e\030\004 \003(\002\022\021\n\tlongitude\030\005 \001(\002\022\020\n\010latitude\030\006"
  " \001(\002\"\030\n\026Detector_Close_Request\"\031\n\027Detect"
  "or_Close_Response\"\034\n\032ED_ReconstructTime_"
  "Request\"\200\001\n\033ED_ReconstructTime_Response\022"
  "\r\n\005task1\030\001 \001(\r\022\r\n\005task2\030\002 \001(\r\022\022\n\nhardwar"
  "eid\030\003 \001(\r\022\017\n\007timelen\030\004 \001(\002\022\016\n\006param1\030\005 \001"
  "(\002\022\016\n\006param2\030\006 \001(\0022\202\002\n\022ElectricalDetecto"
  "r\022J\n\027Detector_Open_Interface\022\026.Detector_"
  "Open_Request\032\027.Detector_Open_Response\022M\n"
  "\030Detector_Close_Interface\022\027.Detector_Clo"
  "se_Request\032\030.Detector_Close_Response\022Q\n\024"
  "get_reconstruct_time\022\033.ED_ReconstructTim"
  "e_Request\032\034.ED_ReconstructTime_Responseb"
  "\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ed_5fapplication_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ed_5fapplication_2eproto = {
  false, false, 727, descriptor_table_protodef_ed_5fapplication_2eproto, "ed_application.proto", 
  &descriptor_table_ed_5fapplication_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_ed_5fapplication_2eproto::offsets,
  file_level_metadata_ed_5fapplication_2eproto, file_level_enum_descriptors_ed_5fapplication_2eproto, file_level_service_descriptors_ed_5fapplication_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ed_5fapplication_2eproto_getter() {
  return &descriptor_table_ed_5fapplication_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ed_5fapplication_2eproto(&descriptor_table_ed_5fapplication_2eproto);

// ===================================================================

class Detector_Open_Request::_Internal {
 public:
};

Detector_Open_Request::Detector_Open_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Detector_Open_Request)
}
Detector_Open_Request::Detector_Open_Request(const Detector_Open_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rf_freq_min_, &from.rf_freq_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&rf_freq_max_) -
    reinterpret_cast<char*>(&rf_freq_min_)) + sizeof(rf_freq_max_));
  // @@protoc_insertion_point(copy_constructor:Detector_Open_Request)
}

inline void Detector_Open_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rf_freq_min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rf_freq_max_) -
    reinterpret_cast<char*>(&rf_freq_min_)) + sizeof(rf_freq_max_));
}

Detector_Open_Request::~Detector_Open_Request() {
  // @@protoc_insertion_point(destructor:Detector_Open_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Detector_Open_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Detector_Open_Request::ArenaDtor(void* object) {
  Detector_Open_Request* _this = reinterpret_cast< Detector_Open_Request* >(object);
  (void)_this;
}
void Detector_Open_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Detector_Open_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Detector_Open_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Detector_Open_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rf_freq_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rf_freq_max_) -
      reinterpret_cast<char*>(&rf_freq_min_)) + sizeof(rf_freq_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detector_Open_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float RF_Freq_min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          rf_freq_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float RF_Freq_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          rf_freq_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Detector_Open_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Detector_Open_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float RF_Freq_min = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rf_freq_min = this->_internal_rf_freq_min();
  uint32_t raw_rf_freq_min;
  memcpy(&raw_rf_freq_min, &tmp_rf_freq_min, sizeof(tmp_rf_freq_min));
  if (raw_rf_freq_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_rf_freq_min(), target);
  }

  // float RF_Freq_max = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rf_freq_max = this->_internal_rf_freq_max();
  uint32_t raw_rf_freq_max;
  memcpy(&raw_rf_freq_max, &tmp_rf_freq_max, sizeof(tmp_rf_freq_max));
  if (raw_rf_freq_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_rf_freq_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Detector_Open_Request)
  return target;
}

size_t Detector_Open_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Detector_Open_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float RF_Freq_min = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rf_freq_min = this->_internal_rf_freq_min();
  uint32_t raw_rf_freq_min;
  memcpy(&raw_rf_freq_min, &tmp_rf_freq_min, sizeof(tmp_rf_freq_min));
  if (raw_rf_freq_min != 0) {
    total_size += 1 + 4;
  }

  // float RF_Freq_max = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rf_freq_max = this->_internal_rf_freq_max();
  uint32_t raw_rf_freq_max;
  memcpy(&raw_rf_freq_max, &tmp_rf_freq_max, sizeof(tmp_rf_freq_max));
  if (raw_rf_freq_max != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Detector_Open_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Detector_Open_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Detector_Open_Request::GetClassData() const { return &_class_data_; }

void Detector_Open_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Detector_Open_Request *>(to)->MergeFrom(
      static_cast<const Detector_Open_Request &>(from));
}


void Detector_Open_Request::MergeFrom(const Detector_Open_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Detector_Open_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rf_freq_min = from._internal_rf_freq_min();
  uint32_t raw_rf_freq_min;
  memcpy(&raw_rf_freq_min, &tmp_rf_freq_min, sizeof(tmp_rf_freq_min));
  if (raw_rf_freq_min != 0) {
    _internal_set_rf_freq_min(from._internal_rf_freq_min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rf_freq_max = from._internal_rf_freq_max();
  uint32_t raw_rf_freq_max;
  memcpy(&raw_rf_freq_max, &tmp_rf_freq_max, sizeof(tmp_rf_freq_max));
  if (raw_rf_freq_max != 0) {
    _internal_set_rf_freq_max(from._internal_rf_freq_max());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Detector_Open_Request::CopyFrom(const Detector_Open_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Detector_Open_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detector_Open_Request::IsInitialized() const {
  return true;
}

void Detector_Open_Request::InternalSwap(Detector_Open_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detector_Open_Request, rf_freq_max_)
      + sizeof(Detector_Open_Request::rf_freq_max_)
      - PROTOBUF_FIELD_OFFSET(Detector_Open_Request, rf_freq_min_)>(
          reinterpret_cast<char*>(&rf_freq_min_),
          reinterpret_cast<char*>(&other->rf_freq_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detector_Open_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ed_5fapplication_2eproto_getter, &descriptor_table_ed_5fapplication_2eproto_once,
      file_level_metadata_ed_5fapplication_2eproto[0]);
}

// ===================================================================

class Detector_Open_Response::_Internal {
 public:
};

Detector_Open_Response::Detector_Open_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  serial_number_(arena),
  possible_models_(arena),
  confidence_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Detector_Open_Response)
}
Detector_Open_Response::Detector_Open_Response(const Detector_Open_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      serial_number_(from.serial_number_),
      possible_models_(from.possible_models_),
      confidence_(from.confidence_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&signal_number_, &from.signal_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&signal_number_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:Detector_Open_Response)
}

inline void Detector_Open_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signal_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&signal_number_)) + sizeof(latitude_));
}

Detector_Open_Response::~Detector_Open_Response() {
  // @@protoc_insertion_point(destructor:Detector_Open_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Detector_Open_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Detector_Open_Response::ArenaDtor(void* object) {
  Detector_Open_Response* _this = reinterpret_cast< Detector_Open_Response* >(object);
  (void)_this;
}
void Detector_Open_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Detector_Open_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Detector_Open_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Detector_Open_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serial_number_.Clear();
  possible_models_.Clear();
  confidence_.Clear();
  ::memset(&signal_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&signal_number_)) + sizeof(latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detector_Open_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Signal_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          signal_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 Serial_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_serial_number(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_serial_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string possible_models = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_possible_models();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Detector_Open_Response.possible_models"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float Confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_confidence(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_confidence(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float latitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Detector_Open_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Detector_Open_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Signal_number = 1;
  if (this->_internal_signal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_signal_number(), target);
  }

  // repeated uint32 Serial_number = 2;
  {
    int byte_size = _serial_number_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_serial_number(), byte_size, target);
    }
  }

  // repeated string possible_models = 3;
  for (int i = 0, n = this->_internal_possible_models_size(); i < n; i++) {
    const auto& s = this->_internal_possible_models(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Detector_Open_Response.possible_models");
    target = stream->WriteString(3, s, target);
  }

  // repeated float Confidence = 4;
  if (this->_internal_confidence_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_confidence(), target);
  }

  // float longitude = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_longitude(), target);
  }

  // float latitude = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Detector_Open_Response)
  return target;
}

size_t Detector_Open_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Detector_Open_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Serial_number = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->serial_number_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _serial_number_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string possible_models = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(possible_models_.size());
  for (int i = 0, n = possible_models_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      possible_models_.Get(i));
  }

  // repeated float Confidence = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_confidence_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // uint32 Signal_number = 1;
  if (this->_internal_signal_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_signal_number());
  }

  // float longitude = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Detector_Open_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Detector_Open_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Detector_Open_Response::GetClassData() const { return &_class_data_; }

void Detector_Open_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Detector_Open_Response *>(to)->MergeFrom(
      static_cast<const Detector_Open_Response &>(from));
}


void Detector_Open_Response::MergeFrom(const Detector_Open_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Detector_Open_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  serial_number_.MergeFrom(from.serial_number_);
  possible_models_.MergeFrom(from.possible_models_);
  confidence_.MergeFrom(from.confidence_);
  if (from._internal_signal_number() != 0) {
    _internal_set_signal_number(from._internal_signal_number());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = from._internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = from._internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Detector_Open_Response::CopyFrom(const Detector_Open_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Detector_Open_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detector_Open_Response::IsInitialized() const {
  return true;
}

void Detector_Open_Response::InternalSwap(Detector_Open_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  serial_number_.InternalSwap(&other->serial_number_);
  possible_models_.InternalSwap(&other->possible_models_);
  confidence_.InternalSwap(&other->confidence_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detector_Open_Response, latitude_)
      + sizeof(Detector_Open_Response::latitude_)
      - PROTOBUF_FIELD_OFFSET(Detector_Open_Response, signal_number_)>(
          reinterpret_cast<char*>(&signal_number_),
          reinterpret_cast<char*>(&other->signal_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detector_Open_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ed_5fapplication_2eproto_getter, &descriptor_table_ed_5fapplication_2eproto_once,
      file_level_metadata_ed_5fapplication_2eproto[1]);
}

// ===================================================================

class Detector_Close_Request::_Internal {
 public:
};

Detector_Close_Request::Detector_Close_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Detector_Close_Request)
}
Detector_Close_Request::Detector_Close_Request(const Detector_Close_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Detector_Close_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Detector_Close_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Detector_Close_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Detector_Close_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ed_5fapplication_2eproto_getter, &descriptor_table_ed_5fapplication_2eproto_once,
      file_level_metadata_ed_5fapplication_2eproto[2]);
}

// ===================================================================

class Detector_Close_Response::_Internal {
 public:
};

Detector_Close_Response::Detector_Close_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Detector_Close_Response)
}
Detector_Close_Response::Detector_Close_Response(const Detector_Close_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Detector_Close_Response)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Detector_Close_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Detector_Close_Response::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Detector_Close_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ed_5fapplication_2eproto_getter, &descriptor_table_ed_5fapplication_2eproto_once,
      file_level_metadata_ed_5fapplication_2eproto[3]);
}

// ===================================================================

class ED_ReconstructTime_Request::_Internal {
 public:
};

ED_ReconstructTime_Request::ED_ReconstructTime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ED_ReconstructTime_Request)
}
ED_ReconstructTime_Request::ED_ReconstructTime_Request(const ED_ReconstructTime_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ED_ReconstructTime_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ED_ReconstructTime_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ED_ReconstructTime_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ED_ReconstructTime_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ed_5fapplication_2eproto_getter, &descriptor_table_ed_5fapplication_2eproto_once,
      file_level_metadata_ed_5fapplication_2eproto[4]);
}

// ===================================================================

class ED_ReconstructTime_Response::_Internal {
 public:
};

ED_ReconstructTime_Response::ED_ReconstructTime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ED_ReconstructTime_Response)
}
ED_ReconstructTime_Response::ED_ReconstructTime_Response(const ED_ReconstructTime_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&task1_, &from.task1_,
    static_cast<size_t>(reinterpret_cast<char*>(&param2_) -
    reinterpret_cast<char*>(&task1_)) + sizeof(param2_));
  // @@protoc_insertion_point(copy_constructor:ED_ReconstructTime_Response)
}

inline void ED_ReconstructTime_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&param2_) -
    reinterpret_cast<char*>(&task1_)) + sizeof(param2_));
}

ED_ReconstructTime_Response::~ED_ReconstructTime_Response() {
  // @@protoc_insertion_point(destructor:ED_ReconstructTime_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ED_ReconstructTime_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ED_ReconstructTime_Response::ArenaDtor(void* object) {
  ED_ReconstructTime_Response* _this = reinterpret_cast< ED_ReconstructTime_Response* >(object);
  (void)_this;
}
void ED_ReconstructTime_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ED_ReconstructTime_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ED_ReconstructTime_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:ED_ReconstructTime_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&task1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param2_) -
      reinterpret_cast<char*>(&task1_)) + sizeof(param2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ED_ReconstructTime_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 task1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          task1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 task2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          task2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hardwareid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          hardwareid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float timelen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          timelen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float param1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          param1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float param2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          param2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ED_ReconstructTime_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ED_ReconstructTime_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 task1 = 1;
  if (this->_internal_task1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_task1(), target);
  }

  // uint32 task2 = 2;
  if (this->_internal_task2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_task2(), target);
  }

  // uint32 hardwareid = 3;
  if (this->_internal_hardwareid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hardwareid(), target);
  }

  // float timelen = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_timelen = this->_internal_timelen();
  uint32_t raw_timelen;
  memcpy(&raw_timelen, &tmp_timelen, sizeof(tmp_timelen));
  if (raw_timelen != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_timelen(), target);
  }

  // float param1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param1 = this->_internal_param1();
  uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_param1(), target);
  }

  // float param2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param2 = this->_internal_param2();
  uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_param2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ED_ReconstructTime_Response)
  return target;
}

size_t ED_ReconstructTime_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ED_ReconstructTime_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 task1 = 1;
  if (this->_internal_task1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_task1());
  }

  // uint32 task2 = 2;
  if (this->_internal_task2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_task2());
  }

  // uint32 hardwareid = 3;
  if (this->_internal_hardwareid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hardwareid());
  }

  // float timelen = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_timelen = this->_internal_timelen();
  uint32_t raw_timelen;
  memcpy(&raw_timelen, &tmp_timelen, sizeof(tmp_timelen));
  if (raw_timelen != 0) {
    total_size += 1 + 4;
  }

  // float param1 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param1 = this->_internal_param1();
  uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    total_size += 1 + 4;
  }

  // float param2 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param2 = this->_internal_param2();
  uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ED_ReconstructTime_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ED_ReconstructTime_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ED_ReconstructTime_Response::GetClassData() const { return &_class_data_; }

void ED_ReconstructTime_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ED_ReconstructTime_Response *>(to)->MergeFrom(
      static_cast<const ED_ReconstructTime_Response &>(from));
}


void ED_ReconstructTime_Response::MergeFrom(const ED_ReconstructTime_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ED_ReconstructTime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_task1() != 0) {
    _internal_set_task1(from._internal_task1());
  }
  if (from._internal_task2() != 0) {
    _internal_set_task2(from._internal_task2());
  }
  if (from._internal_hardwareid() != 0) {
    _internal_set_hardwareid(from._internal_hardwareid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_timelen = from._internal_timelen();
  uint32_t raw_timelen;
  memcpy(&raw_timelen, &tmp_timelen, sizeof(tmp_timelen));
  if (raw_timelen != 0) {
    _internal_set_timelen(from._internal_timelen());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param1 = from._internal_param1();
  uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    _internal_set_param1(from._internal_param1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param2 = from._internal_param2();
  uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    _internal_set_param2(from._internal_param2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ED_ReconstructTime_Response::CopyFrom(const ED_ReconstructTime_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ED_ReconstructTime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ED_ReconstructTime_Response::IsInitialized() const {
  return true;
}

void ED_ReconstructTime_Response::InternalSwap(ED_ReconstructTime_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ED_ReconstructTime_Response, param2_)
      + sizeof(ED_ReconstructTime_Response::param2_)
      - PROTOBUF_FIELD_OFFSET(ED_ReconstructTime_Response, task1_)>(
          reinterpret_cast<char*>(&task1_),
          reinterpret_cast<char*>(&other->task1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ED_ReconstructTime_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ed_5fapplication_2eproto_getter, &descriptor_table_ed_5fapplication_2eproto_once,
      file_level_metadata_ed_5fapplication_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Detector_Open_Request* Arena::CreateMaybeMessage< ::Detector_Open_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Detector_Open_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Detector_Open_Response* Arena::CreateMaybeMessage< ::Detector_Open_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Detector_Open_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Detector_Close_Request* Arena::CreateMaybeMessage< ::Detector_Close_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Detector_Close_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Detector_Close_Response* Arena::CreateMaybeMessage< ::Detector_Close_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Detector_Close_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::ED_ReconstructTime_Request* Arena::CreateMaybeMessage< ::ED_ReconstructTime_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ED_ReconstructTime_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::ED_ReconstructTime_Response* Arena::CreateMaybeMessage< ::ED_ReconstructTime_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ED_ReconstructTime_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
