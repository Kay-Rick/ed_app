// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ed_application.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ed_5fapplication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ed_5fapplication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ed_5fapplication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ed_5fapplication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ed_5fapplication_2eproto;
class Detector_Close_Request;
struct Detector_Close_RequestDefaultTypeInternal;
extern Detector_Close_RequestDefaultTypeInternal _Detector_Close_Request_default_instance_;
class Detector_Close_Response;
struct Detector_Close_ResponseDefaultTypeInternal;
extern Detector_Close_ResponseDefaultTypeInternal _Detector_Close_Response_default_instance_;
class Detector_Open_Request;
struct Detector_Open_RequestDefaultTypeInternal;
extern Detector_Open_RequestDefaultTypeInternal _Detector_Open_Request_default_instance_;
class Detector_Open_Response;
struct Detector_Open_ResponseDefaultTypeInternal;
extern Detector_Open_ResponseDefaultTypeInternal _Detector_Open_Response_default_instance_;
class ED_ReconstructTime_Request;
struct ED_ReconstructTime_RequestDefaultTypeInternal;
extern ED_ReconstructTime_RequestDefaultTypeInternal _ED_ReconstructTime_Request_default_instance_;
class ED_ReconstructTime_Response;
struct ED_ReconstructTime_ResponseDefaultTypeInternal;
extern ED_ReconstructTime_ResponseDefaultTypeInternal _ED_ReconstructTime_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Detector_Close_Request* Arena::CreateMaybeMessage<::Detector_Close_Request>(Arena*);
template<> ::Detector_Close_Response* Arena::CreateMaybeMessage<::Detector_Close_Response>(Arena*);
template<> ::Detector_Open_Request* Arena::CreateMaybeMessage<::Detector_Open_Request>(Arena*);
template<> ::Detector_Open_Response* Arena::CreateMaybeMessage<::Detector_Open_Response>(Arena*);
template<> ::ED_ReconstructTime_Request* Arena::CreateMaybeMessage<::ED_ReconstructTime_Request>(Arena*);
template<> ::ED_ReconstructTime_Response* Arena::CreateMaybeMessage<::ED_ReconstructTime_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Detector_Open_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Detector_Open_Request) */ {
 public:
  inline Detector_Open_Request() : Detector_Open_Request(nullptr) {}
  ~Detector_Open_Request() override;
  explicit constexpr Detector_Open_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detector_Open_Request(const Detector_Open_Request& from);
  Detector_Open_Request(Detector_Open_Request&& from) noexcept
    : Detector_Open_Request() {
    *this = ::std::move(from);
  }

  inline Detector_Open_Request& operator=(const Detector_Open_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detector_Open_Request& operator=(Detector_Open_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Detector_Open_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detector_Open_Request* internal_default_instance() {
    return reinterpret_cast<const Detector_Open_Request*>(
               &_Detector_Open_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Detector_Open_Request& a, Detector_Open_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Detector_Open_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detector_Open_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Detector_Open_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Detector_Open_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Detector_Open_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Detector_Open_Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detector_Open_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Detector_Open_Request";
  }
  protected:
  explicit Detector_Open_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFFreqMinFieldNumber = 2,
    kRFFreqMaxFieldNumber = 3,
  };
  // float RF_Freq_min = 2;
  void clear_rf_freq_min();
  float rf_freq_min() const;
  void set_rf_freq_min(float value);
  private:
  float _internal_rf_freq_min() const;
  void _internal_set_rf_freq_min(float value);
  public:

  // float RF_Freq_max = 3;
  void clear_rf_freq_max();
  float rf_freq_max() const;
  void set_rf_freq_max(float value);
  private:
  float _internal_rf_freq_max() const;
  void _internal_set_rf_freq_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:Detector_Open_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float rf_freq_min_;
  float rf_freq_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ed_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class Detector_Open_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Detector_Open_Response) */ {
 public:
  inline Detector_Open_Response() : Detector_Open_Response(nullptr) {}
  ~Detector_Open_Response() override;
  explicit constexpr Detector_Open_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detector_Open_Response(const Detector_Open_Response& from);
  Detector_Open_Response(Detector_Open_Response&& from) noexcept
    : Detector_Open_Response() {
    *this = ::std::move(from);
  }

  inline Detector_Open_Response& operator=(const Detector_Open_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detector_Open_Response& operator=(Detector_Open_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Detector_Open_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detector_Open_Response* internal_default_instance() {
    return reinterpret_cast<const Detector_Open_Response*>(
               &_Detector_Open_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Detector_Open_Response& a, Detector_Open_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Detector_Open_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detector_Open_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Detector_Open_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Detector_Open_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Detector_Open_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Detector_Open_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detector_Open_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Detector_Open_Response";
  }
  protected:
  explicit Detector_Open_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 2,
    kPossibleModelsFieldNumber = 3,
    kConfidenceFieldNumber = 4,
    kSignalNumberFieldNumber = 1,
    kLongitudeFieldNumber = 5,
    kLatitudeFieldNumber = 6,
  };
  // repeated uint32 Serial_number = 2;
  int serial_number_size() const;
  private:
  int _internal_serial_number_size() const;
  public:
  void clear_serial_number();
  private:
  uint32_t _internal_serial_number(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_serial_number() const;
  void _internal_add_serial_number(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_serial_number();
  public:
  uint32_t serial_number(int index) const;
  void set_serial_number(int index, uint32_t value);
  void add_serial_number(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      serial_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_serial_number();

  // repeated string possible_models = 3;
  int possible_models_size() const;
  private:
  int _internal_possible_models_size() const;
  public:
  void clear_possible_models();
  const std::string& possible_models(int index) const;
  std::string* mutable_possible_models(int index);
  void set_possible_models(int index, const std::string& value);
  void set_possible_models(int index, std::string&& value);
  void set_possible_models(int index, const char* value);
  void set_possible_models(int index, const char* value, size_t size);
  std::string* add_possible_models();
  void add_possible_models(const std::string& value);
  void add_possible_models(std::string&& value);
  void add_possible_models(const char* value);
  void add_possible_models(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& possible_models() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_possible_models();
  private:
  const std::string& _internal_possible_models(int index) const;
  std::string* _internal_add_possible_models();
  public:

  // repeated float Confidence = 4;
  int confidence_size() const;
  private:
  int _internal_confidence_size() const;
  public:
  void clear_confidence();
  private:
  float _internal_confidence(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_confidence() const;
  void _internal_add_confidence(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_confidence();
  public:
  float confidence(int index) const;
  void set_confidence(int index, float value);
  void add_confidence(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      confidence() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_confidence();

  // uint32 Signal_number = 1;
  void clear_signal_number();
  uint32_t signal_number() const;
  void set_signal_number(uint32_t value);
  private:
  uint32_t _internal_signal_number() const;
  void _internal_set_signal_number(uint32_t value);
  public:

  // float longitude = 5;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float latitude = 6;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:Detector_Open_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > serial_number_;
  mutable std::atomic<int> _serial_number_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> possible_models_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > confidence_;
  uint32_t signal_number_;
  float longitude_;
  float latitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ed_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class Detector_Close_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Detector_Close_Request) */ {
 public:
  inline Detector_Close_Request() : Detector_Close_Request(nullptr) {}
  explicit constexpr Detector_Close_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detector_Close_Request(const Detector_Close_Request& from);
  Detector_Close_Request(Detector_Close_Request&& from) noexcept
    : Detector_Close_Request() {
    *this = ::std::move(from);
  }

  inline Detector_Close_Request& operator=(const Detector_Close_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detector_Close_Request& operator=(Detector_Close_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Detector_Close_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detector_Close_Request* internal_default_instance() {
    return reinterpret_cast<const Detector_Close_Request*>(
               &_Detector_Close_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Detector_Close_Request& a, Detector_Close_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Detector_Close_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detector_Close_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Detector_Close_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Detector_Close_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Detector_Close_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Detector_Close_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Detector_Close_Request";
  }
  protected:
  explicit Detector_Close_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Detector_Close_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ed_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class Detector_Close_Response final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Detector_Close_Response) */ {
 public:
  inline Detector_Close_Response() : Detector_Close_Response(nullptr) {}
  explicit constexpr Detector_Close_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detector_Close_Response(const Detector_Close_Response& from);
  Detector_Close_Response(Detector_Close_Response&& from) noexcept
    : Detector_Close_Response() {
    *this = ::std::move(from);
  }

  inline Detector_Close_Response& operator=(const Detector_Close_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detector_Close_Response& operator=(Detector_Close_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Detector_Close_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detector_Close_Response* internal_default_instance() {
    return reinterpret_cast<const Detector_Close_Response*>(
               &_Detector_Close_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Detector_Close_Response& a, Detector_Close_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Detector_Close_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detector_Close_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Detector_Close_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Detector_Close_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Detector_Close_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Detector_Close_Response& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Detector_Close_Response";
  }
  protected:
  explicit Detector_Close_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Detector_Close_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ed_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class ED_ReconstructTime_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ED_ReconstructTime_Request) */ {
 public:
  inline ED_ReconstructTime_Request() : ED_ReconstructTime_Request(nullptr) {}
  explicit constexpr ED_ReconstructTime_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ED_ReconstructTime_Request(const ED_ReconstructTime_Request& from);
  ED_ReconstructTime_Request(ED_ReconstructTime_Request&& from) noexcept
    : ED_ReconstructTime_Request() {
    *this = ::std::move(from);
  }

  inline ED_ReconstructTime_Request& operator=(const ED_ReconstructTime_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ED_ReconstructTime_Request& operator=(ED_ReconstructTime_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ED_ReconstructTime_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const ED_ReconstructTime_Request* internal_default_instance() {
    return reinterpret_cast<const ED_ReconstructTime_Request*>(
               &_ED_ReconstructTime_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ED_ReconstructTime_Request& a, ED_ReconstructTime_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ED_ReconstructTime_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ED_ReconstructTime_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ED_ReconstructTime_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ED_ReconstructTime_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ED_ReconstructTime_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ED_ReconstructTime_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ED_ReconstructTime_Request";
  }
  protected:
  explicit ED_ReconstructTime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ED_ReconstructTime_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ed_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class ED_ReconstructTime_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ED_ReconstructTime_Response) */ {
 public:
  inline ED_ReconstructTime_Response() : ED_ReconstructTime_Response(nullptr) {}
  ~ED_ReconstructTime_Response() override;
  explicit constexpr ED_ReconstructTime_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ED_ReconstructTime_Response(const ED_ReconstructTime_Response& from);
  ED_ReconstructTime_Response(ED_ReconstructTime_Response&& from) noexcept
    : ED_ReconstructTime_Response() {
    *this = ::std::move(from);
  }

  inline ED_ReconstructTime_Response& operator=(const ED_ReconstructTime_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ED_ReconstructTime_Response& operator=(ED_ReconstructTime_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ED_ReconstructTime_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const ED_ReconstructTime_Response* internal_default_instance() {
    return reinterpret_cast<const ED_ReconstructTime_Response*>(
               &_ED_ReconstructTime_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ED_ReconstructTime_Response& a, ED_ReconstructTime_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(ED_ReconstructTime_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ED_ReconstructTime_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ED_ReconstructTime_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ED_ReconstructTime_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ED_ReconstructTime_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ED_ReconstructTime_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ED_ReconstructTime_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ED_ReconstructTime_Response";
  }
  protected:
  explicit ED_ReconstructTime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTask1FieldNumber = 1,
    kTask2FieldNumber = 2,
    kHardwareidFieldNumber = 3,
    kTimelenFieldNumber = 4,
    kParam1FieldNumber = 5,
    kParam2FieldNumber = 6,
  };
  // uint32 task1 = 1;
  void clear_task1();
  uint32_t task1() const;
  void set_task1(uint32_t value);
  private:
  uint32_t _internal_task1() const;
  void _internal_set_task1(uint32_t value);
  public:

  // uint32 task2 = 2;
  void clear_task2();
  uint32_t task2() const;
  void set_task2(uint32_t value);
  private:
  uint32_t _internal_task2() const;
  void _internal_set_task2(uint32_t value);
  public:

  // uint32 hardwareid = 3;
  void clear_hardwareid();
  uint32_t hardwareid() const;
  void set_hardwareid(uint32_t value);
  private:
  uint32_t _internal_hardwareid() const;
  void _internal_set_hardwareid(uint32_t value);
  public:

  // float timelen = 4;
  void clear_timelen();
  float timelen() const;
  void set_timelen(float value);
  private:
  float _internal_timelen() const;
  void _internal_set_timelen(float value);
  public:

  // float param1 = 5;
  void clear_param1();
  float param1() const;
  void set_param1(float value);
  private:
  float _internal_param1() const;
  void _internal_set_param1(float value);
  public:

  // float param2 = 6;
  void clear_param2();
  float param2() const;
  void set_param2(float value);
  private:
  float _internal_param2() const;
  void _internal_set_param2(float value);
  public:

  // @@protoc_insertion_point(class_scope:ED_ReconstructTime_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t task1_;
  uint32_t task2_;
  uint32_t hardwareid_;
  float timelen_;
  float param1_;
  float param2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ed_5fapplication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Detector_Open_Request

// float RF_Freq_min = 2;
inline void Detector_Open_Request::clear_rf_freq_min() {
  rf_freq_min_ = 0;
}
inline float Detector_Open_Request::_internal_rf_freq_min() const {
  return rf_freq_min_;
}
inline float Detector_Open_Request::rf_freq_min() const {
  // @@protoc_insertion_point(field_get:Detector_Open_Request.RF_Freq_min)
  return _internal_rf_freq_min();
}
inline void Detector_Open_Request::_internal_set_rf_freq_min(float value) {
  
  rf_freq_min_ = value;
}
inline void Detector_Open_Request::set_rf_freq_min(float value) {
  _internal_set_rf_freq_min(value);
  // @@protoc_insertion_point(field_set:Detector_Open_Request.RF_Freq_min)
}

// float RF_Freq_max = 3;
inline void Detector_Open_Request::clear_rf_freq_max() {
  rf_freq_max_ = 0;
}
inline float Detector_Open_Request::_internal_rf_freq_max() const {
  return rf_freq_max_;
}
inline float Detector_Open_Request::rf_freq_max() const {
  // @@protoc_insertion_point(field_get:Detector_Open_Request.RF_Freq_max)
  return _internal_rf_freq_max();
}
inline void Detector_Open_Request::_internal_set_rf_freq_max(float value) {
  
  rf_freq_max_ = value;
}
inline void Detector_Open_Request::set_rf_freq_max(float value) {
  _internal_set_rf_freq_max(value);
  // @@protoc_insertion_point(field_set:Detector_Open_Request.RF_Freq_max)
}

// -------------------------------------------------------------------

// Detector_Open_Response

// uint32 Signal_number = 1;
inline void Detector_Open_Response::clear_signal_number() {
  signal_number_ = 0u;
}
inline uint32_t Detector_Open_Response::_internal_signal_number() const {
  return signal_number_;
}
inline uint32_t Detector_Open_Response::signal_number() const {
  // @@protoc_insertion_point(field_get:Detector_Open_Response.Signal_number)
  return _internal_signal_number();
}
inline void Detector_Open_Response::_internal_set_signal_number(uint32_t value) {
  
  signal_number_ = value;
}
inline void Detector_Open_Response::set_signal_number(uint32_t value) {
  _internal_set_signal_number(value);
  // @@protoc_insertion_point(field_set:Detector_Open_Response.Signal_number)
}

// repeated uint32 Serial_number = 2;
inline int Detector_Open_Response::_internal_serial_number_size() const {
  return serial_number_.size();
}
inline int Detector_Open_Response::serial_number_size() const {
  return _internal_serial_number_size();
}
inline void Detector_Open_Response::clear_serial_number() {
  serial_number_.Clear();
}
inline uint32_t Detector_Open_Response::_internal_serial_number(int index) const {
  return serial_number_.Get(index);
}
inline uint32_t Detector_Open_Response::serial_number(int index) const {
  // @@protoc_insertion_point(field_get:Detector_Open_Response.Serial_number)
  return _internal_serial_number(index);
}
inline void Detector_Open_Response::set_serial_number(int index, uint32_t value) {
  serial_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:Detector_Open_Response.Serial_number)
}
inline void Detector_Open_Response::_internal_add_serial_number(uint32_t value) {
  serial_number_.Add(value);
}
inline void Detector_Open_Response::add_serial_number(uint32_t value) {
  _internal_add_serial_number(value);
  // @@protoc_insertion_point(field_add:Detector_Open_Response.Serial_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Detector_Open_Response::_internal_serial_number() const {
  return serial_number_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Detector_Open_Response::serial_number() const {
  // @@protoc_insertion_point(field_list:Detector_Open_Response.Serial_number)
  return _internal_serial_number();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Detector_Open_Response::_internal_mutable_serial_number() {
  return &serial_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Detector_Open_Response::mutable_serial_number() {
  // @@protoc_insertion_point(field_mutable_list:Detector_Open_Response.Serial_number)
  return _internal_mutable_serial_number();
}

// repeated string possible_models = 3;
inline int Detector_Open_Response::_internal_possible_models_size() const {
  return possible_models_.size();
}
inline int Detector_Open_Response::possible_models_size() const {
  return _internal_possible_models_size();
}
inline void Detector_Open_Response::clear_possible_models() {
  possible_models_.Clear();
}
inline std::string* Detector_Open_Response::add_possible_models() {
  std::string* _s = _internal_add_possible_models();
  // @@protoc_insertion_point(field_add_mutable:Detector_Open_Response.possible_models)
  return _s;
}
inline const std::string& Detector_Open_Response::_internal_possible_models(int index) const {
  return possible_models_.Get(index);
}
inline const std::string& Detector_Open_Response::possible_models(int index) const {
  // @@protoc_insertion_point(field_get:Detector_Open_Response.possible_models)
  return _internal_possible_models(index);
}
inline std::string* Detector_Open_Response::mutable_possible_models(int index) {
  // @@protoc_insertion_point(field_mutable:Detector_Open_Response.possible_models)
  return possible_models_.Mutable(index);
}
inline void Detector_Open_Response::set_possible_models(int index, const std::string& value) {
  possible_models_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Detector_Open_Response.possible_models)
}
inline void Detector_Open_Response::set_possible_models(int index, std::string&& value) {
  possible_models_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Detector_Open_Response.possible_models)
}
inline void Detector_Open_Response::set_possible_models(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  possible_models_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Detector_Open_Response.possible_models)
}
inline void Detector_Open_Response::set_possible_models(int index, const char* value, size_t size) {
  possible_models_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Detector_Open_Response.possible_models)
}
inline std::string* Detector_Open_Response::_internal_add_possible_models() {
  return possible_models_.Add();
}
inline void Detector_Open_Response::add_possible_models(const std::string& value) {
  possible_models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Detector_Open_Response.possible_models)
}
inline void Detector_Open_Response::add_possible_models(std::string&& value) {
  possible_models_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Detector_Open_Response.possible_models)
}
inline void Detector_Open_Response::add_possible_models(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  possible_models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Detector_Open_Response.possible_models)
}
inline void Detector_Open_Response::add_possible_models(const char* value, size_t size) {
  possible_models_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Detector_Open_Response.possible_models)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Detector_Open_Response::possible_models() const {
  // @@protoc_insertion_point(field_list:Detector_Open_Response.possible_models)
  return possible_models_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Detector_Open_Response::mutable_possible_models() {
  // @@protoc_insertion_point(field_mutable_list:Detector_Open_Response.possible_models)
  return &possible_models_;
}

// repeated float Confidence = 4;
inline int Detector_Open_Response::_internal_confidence_size() const {
  return confidence_.size();
}
inline int Detector_Open_Response::confidence_size() const {
  return _internal_confidence_size();
}
inline void Detector_Open_Response::clear_confidence() {
  confidence_.Clear();
}
inline float Detector_Open_Response::_internal_confidence(int index) const {
  return confidence_.Get(index);
}
inline float Detector_Open_Response::confidence(int index) const {
  // @@protoc_insertion_point(field_get:Detector_Open_Response.Confidence)
  return _internal_confidence(index);
}
inline void Detector_Open_Response::set_confidence(int index, float value) {
  confidence_.Set(index, value);
  // @@protoc_insertion_point(field_set:Detector_Open_Response.Confidence)
}
inline void Detector_Open_Response::_internal_add_confidence(float value) {
  confidence_.Add(value);
}
inline void Detector_Open_Response::add_confidence(float value) {
  _internal_add_confidence(value);
  // @@protoc_insertion_point(field_add:Detector_Open_Response.Confidence)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detector_Open_Response::_internal_confidence() const {
  return confidence_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Detector_Open_Response::confidence() const {
  // @@protoc_insertion_point(field_list:Detector_Open_Response.Confidence)
  return _internal_confidence();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detector_Open_Response::_internal_mutable_confidence() {
  return &confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Detector_Open_Response::mutable_confidence() {
  // @@protoc_insertion_point(field_mutable_list:Detector_Open_Response.Confidence)
  return _internal_mutable_confidence();
}

// float longitude = 5;
inline void Detector_Open_Response::clear_longitude() {
  longitude_ = 0;
}
inline float Detector_Open_Response::_internal_longitude() const {
  return longitude_;
}
inline float Detector_Open_Response::longitude() const {
  // @@protoc_insertion_point(field_get:Detector_Open_Response.longitude)
  return _internal_longitude();
}
inline void Detector_Open_Response::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void Detector_Open_Response::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:Detector_Open_Response.longitude)
}

// float latitude = 6;
inline void Detector_Open_Response::clear_latitude() {
  latitude_ = 0;
}
inline float Detector_Open_Response::_internal_latitude() const {
  return latitude_;
}
inline float Detector_Open_Response::latitude() const {
  // @@protoc_insertion_point(field_get:Detector_Open_Response.latitude)
  return _internal_latitude();
}
inline void Detector_Open_Response::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void Detector_Open_Response::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:Detector_Open_Response.latitude)
}

// -------------------------------------------------------------------

// Detector_Close_Request

// -------------------------------------------------------------------

// Detector_Close_Response

// -------------------------------------------------------------------

// ED_ReconstructTime_Request

// -------------------------------------------------------------------

// ED_ReconstructTime_Response

// uint32 task1 = 1;
inline void ED_ReconstructTime_Response::clear_task1() {
  task1_ = 0u;
}
inline uint32_t ED_ReconstructTime_Response::_internal_task1() const {
  return task1_;
}
inline uint32_t ED_ReconstructTime_Response::task1() const {
  // @@protoc_insertion_point(field_get:ED_ReconstructTime_Response.task1)
  return _internal_task1();
}
inline void ED_ReconstructTime_Response::_internal_set_task1(uint32_t value) {
  
  task1_ = value;
}
inline void ED_ReconstructTime_Response::set_task1(uint32_t value) {
  _internal_set_task1(value);
  // @@protoc_insertion_point(field_set:ED_ReconstructTime_Response.task1)
}

// uint32 task2 = 2;
inline void ED_ReconstructTime_Response::clear_task2() {
  task2_ = 0u;
}
inline uint32_t ED_ReconstructTime_Response::_internal_task2() const {
  return task2_;
}
inline uint32_t ED_ReconstructTime_Response::task2() const {
  // @@protoc_insertion_point(field_get:ED_ReconstructTime_Response.task2)
  return _internal_task2();
}
inline void ED_ReconstructTime_Response::_internal_set_task2(uint32_t value) {
  
  task2_ = value;
}
inline void ED_ReconstructTime_Response::set_task2(uint32_t value) {
  _internal_set_task2(value);
  // @@protoc_insertion_point(field_set:ED_ReconstructTime_Response.task2)
}

// uint32 hardwareid = 3;
inline void ED_ReconstructTime_Response::clear_hardwareid() {
  hardwareid_ = 0u;
}
inline uint32_t ED_ReconstructTime_Response::_internal_hardwareid() const {
  return hardwareid_;
}
inline uint32_t ED_ReconstructTime_Response::hardwareid() const {
  // @@protoc_insertion_point(field_get:ED_ReconstructTime_Response.hardwareid)
  return _internal_hardwareid();
}
inline void ED_ReconstructTime_Response::_internal_set_hardwareid(uint32_t value) {
  
  hardwareid_ = value;
}
inline void ED_ReconstructTime_Response::set_hardwareid(uint32_t value) {
  _internal_set_hardwareid(value);
  // @@protoc_insertion_point(field_set:ED_ReconstructTime_Response.hardwareid)
}

// float timelen = 4;
inline void ED_ReconstructTime_Response::clear_timelen() {
  timelen_ = 0;
}
inline float ED_ReconstructTime_Response::_internal_timelen() const {
  return timelen_;
}
inline float ED_ReconstructTime_Response::timelen() const {
  // @@protoc_insertion_point(field_get:ED_ReconstructTime_Response.timelen)
  return _internal_timelen();
}
inline void ED_ReconstructTime_Response::_internal_set_timelen(float value) {
  
  timelen_ = value;
}
inline void ED_ReconstructTime_Response::set_timelen(float value) {
  _internal_set_timelen(value);
  // @@protoc_insertion_point(field_set:ED_ReconstructTime_Response.timelen)
}

// float param1 = 5;
inline void ED_ReconstructTime_Response::clear_param1() {
  param1_ = 0;
}
inline float ED_ReconstructTime_Response::_internal_param1() const {
  return param1_;
}
inline float ED_ReconstructTime_Response::param1() const {
  // @@protoc_insertion_point(field_get:ED_ReconstructTime_Response.param1)
  return _internal_param1();
}
inline void ED_ReconstructTime_Response::_internal_set_param1(float value) {
  
  param1_ = value;
}
inline void ED_ReconstructTime_Response::set_param1(float value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:ED_ReconstructTime_Response.param1)
}

// float param2 = 6;
inline void ED_ReconstructTime_Response::clear_param2() {
  param2_ = 0;
}
inline float ED_ReconstructTime_Response::_internal_param2() const {
  return param2_;
}
inline float ED_ReconstructTime_Response::param2() const {
  // @@protoc_insertion_point(field_get:ED_ReconstructTime_Response.param2)
  return _internal_param2();
}
inline void ED_ReconstructTime_Response::_internal_set_param2(float value) {
  
  param2_ = value;
}
inline void ED_ReconstructTime_Response::set_param2(float value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:ED_ReconstructTime_Response.param2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ed_5fapplication_2eproto
