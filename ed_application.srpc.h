#pragma once
#include <stdio.h>
#include <string>
#include "srpc/rpc_define.h"
#include "ed_application.pb.h"

namespace ElectricalDetector
{

/*
 * Server codes
 * Generated by SRPC
 */

class Service : public srpc::RPCService
{
public:
	// please implement these methods in server.cc

	virtual void Detector_Open_Interface(Detector_Open_Request *request, Detector_Open_Response *response,
					srpc::RPCContext *ctx) = 0;

	virtual void Detector_Close_Interface(Detector_Close_Request *request, Detector_Close_Response *response,
					srpc::RPCContext *ctx) = 0;

	virtual void get_reconstruct_time(ED_ReconstructTime_Request *request, ED_ReconstructTime_Response *response,
					srpc::RPCContext *ctx) = 0;

public:
	Service();
};

/*
 * Client codes
 * Generated by SRPC
 */

using Detector_Open_InterfaceDone = std::function<void (Detector_Open_Response *, srpc::RPCContext *)>;
using Detector_Close_InterfaceDone = std::function<void (Detector_Close_Response *, srpc::RPCContext *)>;
using get_reconstruct_timeDone = std::function<void (ED_ReconstructTime_Response *, srpc::RPCContext *)>;

class SRPCClient : public srpc::SRPCClient
{
public:
	void Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_InterfaceDone done);
	void Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<Detector_Open_Response, srpc::RPCSyncContext>> async_Detector_Open_Interface(const Detector_Open_Request *req);

	void Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_InterfaceDone done);
	void Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<Detector_Close_Response, srpc::RPCSyncContext>> async_Detector_Close_Interface(const Detector_Close_Request *req);

	void get_reconstruct_time(const ED_ReconstructTime_Request *req, get_reconstruct_timeDone done);
	void get_reconstruct_time(const ED_ReconstructTime_Request *req, ED_ReconstructTime_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>> async_get_reconstruct_time(const ED_ReconstructTime_Request *req);

public:
	SRPCClient(const char *host, unsigned short port);
	SRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::SRPCClientTask *create_Detector_Open_Interface_task(Detector_Open_InterfaceDone done);
	srpc::SRPCClientTask *create_Detector_Close_Interface_task(Detector_Close_InterfaceDone done);
	srpc::SRPCClientTask *create_get_reconstruct_time_task(get_reconstruct_timeDone done);
};

class SRPCHttpClient : public srpc::SRPCHttpClient
{
public:
	void Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_InterfaceDone done);
	void Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<Detector_Open_Response, srpc::RPCSyncContext>> async_Detector_Open_Interface(const Detector_Open_Request *req);

	void Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_InterfaceDone done);
	void Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<Detector_Close_Response, srpc::RPCSyncContext>> async_Detector_Close_Interface(const Detector_Close_Request *req);

	void get_reconstruct_time(const ED_ReconstructTime_Request *req, get_reconstruct_timeDone done);
	void get_reconstruct_time(const ED_ReconstructTime_Request *req, ED_ReconstructTime_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>> async_get_reconstruct_time(const ED_ReconstructTime_Request *req);

public:
	SRPCHttpClient(const char *host, unsigned short port);
	SRPCHttpClient(const struct srpc::RPCClientParams *params);

public:
	srpc::SRPCHttpClientTask *create_Detector_Open_Interface_task(Detector_Open_InterfaceDone done);
	srpc::SRPCHttpClientTask *create_Detector_Close_Interface_task(Detector_Close_InterfaceDone done);
	srpc::SRPCHttpClientTask *create_get_reconstruct_time_task(get_reconstruct_timeDone done);
};

class BRPCClient : public srpc::BRPCClient
{
public:
	void Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_InterfaceDone done);
	void Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<Detector_Open_Response, srpc::RPCSyncContext>> async_Detector_Open_Interface(const Detector_Open_Request *req);

	void Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_InterfaceDone done);
	void Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<Detector_Close_Response, srpc::RPCSyncContext>> async_Detector_Close_Interface(const Detector_Close_Request *req);

	void get_reconstruct_time(const ED_ReconstructTime_Request *req, get_reconstruct_timeDone done);
	void get_reconstruct_time(const ED_ReconstructTime_Request *req, ED_ReconstructTime_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>> async_get_reconstruct_time(const ED_ReconstructTime_Request *req);

public:
	BRPCClient(const char *host, unsigned short port);
	BRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::BRPCClientTask *create_Detector_Open_Interface_task(Detector_Open_InterfaceDone done);
	srpc::BRPCClientTask *create_Detector_Close_Interface_task(Detector_Close_InterfaceDone done);
	srpc::BRPCClientTask *create_get_reconstruct_time_task(get_reconstruct_timeDone done);
};

class TRPCClient : public srpc::TRPCClient
{
public:
	void Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_InterfaceDone done);
	void Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<Detector_Open_Response, srpc::RPCSyncContext>> async_Detector_Open_Interface(const Detector_Open_Request *req);

	void Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_InterfaceDone done);
	void Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<Detector_Close_Response, srpc::RPCSyncContext>> async_Detector_Close_Interface(const Detector_Close_Request *req);

	void get_reconstruct_time(const ED_ReconstructTime_Request *req, get_reconstruct_timeDone done);
	void get_reconstruct_time(const ED_ReconstructTime_Request *req, ED_ReconstructTime_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>> async_get_reconstruct_time(const ED_ReconstructTime_Request *req);

public:
	TRPCClient(const char *host, unsigned short port);
	TRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::TRPCClientTask *create_Detector_Open_Interface_task(Detector_Open_InterfaceDone done);
	srpc::TRPCClientTask *create_Detector_Close_Interface_task(Detector_Close_InterfaceDone done);
	srpc::TRPCClientTask *create_get_reconstruct_time_task(get_reconstruct_timeDone done);
};

class TRPCHttpClient : public srpc::TRPCHttpClient
{
public:
	void Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_InterfaceDone done);
	void Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<Detector_Open_Response, srpc::RPCSyncContext>> async_Detector_Open_Interface(const Detector_Open_Request *req);

	void Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_InterfaceDone done);
	void Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<Detector_Close_Response, srpc::RPCSyncContext>> async_Detector_Close_Interface(const Detector_Close_Request *req);

	void get_reconstruct_time(const ED_ReconstructTime_Request *req, get_reconstruct_timeDone done);
	void get_reconstruct_time(const ED_ReconstructTime_Request *req, ED_ReconstructTime_Response *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>> async_get_reconstruct_time(const ED_ReconstructTime_Request *req);

public:
	TRPCHttpClient(const char *host, unsigned short port);
	TRPCHttpClient(const struct srpc::RPCClientParams *params);

public:
	srpc::TRPCHttpClientTask *create_Detector_Open_Interface_task(Detector_Open_InterfaceDone done);
	srpc::TRPCHttpClientTask *create_Detector_Close_Interface_task(Detector_Close_InterfaceDone done);
	srpc::TRPCHttpClientTask *create_get_reconstruct_time_task(get_reconstruct_timeDone done);
};

///// implements detials /////

inline Service::Service(): srpc::RPCService("ElectricalDetector")
{
	this->srpc::RPCService::add_method("Detector_Open_Interface",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::Detector_Open_Interface);
		});

	this->srpc::RPCService::add_method("Detector_Close_Interface",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::Detector_Close_Interface);
		});

	this->srpc::RPCService::add_method("get_reconstruct_time",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::get_reconstruct_time);
		});
}

inline SRPCClient::SRPCClient(const char *host, unsigned short port):
	srpc::SRPCClient("ElectricalDetector")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::SRPCClient::init(&params);
}

inline SRPCClient::SRPCClient(const struct srpc::RPCClientParams *params):
	srpc::SRPCClient("ElectricalDetector")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::SRPCClient::init(temp);
}

inline void SRPCClient::Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("Detector_Open_Interface", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Detector_Open_Interface(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<Detector_Open_Response, srpc::RPCSyncContext>> SRPCClient::async_Detector_Open_Interface(const Detector_Open_Request *req)
{
	using RESULT = std::pair<Detector_Open_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<Detector_Open_Response>("Detector_Open_Interface", srpc::RPCAsyncFutureCallback<Detector_Open_Response>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("Detector_Close_Interface", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Detector_Close_Interface(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<Detector_Close_Response, srpc::RPCSyncContext>> SRPCClient::async_Detector_Close_Interface(const Detector_Close_Request *req)
{
	using RESULT = std::pair<Detector_Close_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<Detector_Close_Response>("Detector_Close_Interface", srpc::RPCAsyncFutureCallback<Detector_Close_Response>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::get_reconstruct_time(const ED_ReconstructTime_Request *req, get_reconstruct_timeDone done)
{
	auto *task = this->create_rpc_client_task("get_reconstruct_time", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::get_reconstruct_time(const ED_ReconstructTime_Request *req, ED_ReconstructTime_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_get_reconstruct_time(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>> SRPCClient::async_get_reconstruct_time(const ED_ReconstructTime_Request *req)
{
	using RESULT = std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ED_ReconstructTime_Response>("get_reconstruct_time", srpc::RPCAsyncFutureCallback<ED_ReconstructTime_Response>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::SRPCClientTask *SRPCClient::create_Detector_Open_Interface_task(Detector_Open_InterfaceDone done)
{
	return this->create_rpc_client_task("Detector_Open_Interface", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_Detector_Close_Interface_task(Detector_Close_InterfaceDone done)
{
	return this->create_rpc_client_task("Detector_Close_Interface", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_get_reconstruct_time_task(get_reconstruct_timeDone done)
{
	return this->create_rpc_client_task("get_reconstruct_time", std::move(done));
}

inline SRPCHttpClient::SRPCHttpClient(const char *host, unsigned short port):
	srpc::SRPCHttpClient("ElectricalDetector")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::SRPCHttpClient::init(&params);
}

inline SRPCHttpClient::SRPCHttpClient(const struct srpc::RPCClientParams *params):
	srpc::SRPCHttpClient("ElectricalDetector")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::SRPCHttpClient::init(temp);
}

inline void SRPCHttpClient::Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("Detector_Open_Interface", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Detector_Open_Interface(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<Detector_Open_Response, srpc::RPCSyncContext>> SRPCHttpClient::async_Detector_Open_Interface(const Detector_Open_Request *req)
{
	using RESULT = std::pair<Detector_Open_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<Detector_Open_Response>("Detector_Open_Interface", srpc::RPCAsyncFutureCallback<Detector_Open_Response>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("Detector_Close_Interface", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Detector_Close_Interface(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<Detector_Close_Response, srpc::RPCSyncContext>> SRPCHttpClient::async_Detector_Close_Interface(const Detector_Close_Request *req)
{
	using RESULT = std::pair<Detector_Close_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<Detector_Close_Response>("Detector_Close_Interface", srpc::RPCAsyncFutureCallback<Detector_Close_Response>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::get_reconstruct_time(const ED_ReconstructTime_Request *req, get_reconstruct_timeDone done)
{
	auto *task = this->create_rpc_client_task("get_reconstruct_time", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::get_reconstruct_time(const ED_ReconstructTime_Request *req, ED_ReconstructTime_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_get_reconstruct_time(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>> SRPCHttpClient::async_get_reconstruct_time(const ED_ReconstructTime_Request *req)
{
	using RESULT = std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ED_ReconstructTime_Response>("get_reconstruct_time", srpc::RPCAsyncFutureCallback<ED_ReconstructTime_Response>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_Detector_Open_Interface_task(Detector_Open_InterfaceDone done)
{
	return this->create_rpc_client_task("Detector_Open_Interface", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_Detector_Close_Interface_task(Detector_Close_InterfaceDone done)
{
	return this->create_rpc_client_task("Detector_Close_Interface", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_get_reconstruct_time_task(get_reconstruct_timeDone done)
{
	return this->create_rpc_client_task("get_reconstruct_time", std::move(done));
}

inline BRPCClient::BRPCClient(const char *host, unsigned short port):
	srpc::BRPCClient("ElectricalDetector")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::BRPCClient::init(&params);
}

inline BRPCClient::BRPCClient(const struct srpc::RPCClientParams *params):
	srpc::BRPCClient("ElectricalDetector")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::BRPCClient::init(temp);
}

inline void BRPCClient::Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("Detector_Open_Interface", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Detector_Open_Interface(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<Detector_Open_Response, srpc::RPCSyncContext>> BRPCClient::async_Detector_Open_Interface(const Detector_Open_Request *req)
{
	using RESULT = std::pair<Detector_Open_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<Detector_Open_Response>("Detector_Open_Interface", srpc::RPCAsyncFutureCallback<Detector_Open_Response>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("Detector_Close_Interface", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Detector_Close_Interface(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<Detector_Close_Response, srpc::RPCSyncContext>> BRPCClient::async_Detector_Close_Interface(const Detector_Close_Request *req)
{
	using RESULT = std::pair<Detector_Close_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<Detector_Close_Response>("Detector_Close_Interface", srpc::RPCAsyncFutureCallback<Detector_Close_Response>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::get_reconstruct_time(const ED_ReconstructTime_Request *req, get_reconstruct_timeDone done)
{
	auto *task = this->create_rpc_client_task("get_reconstruct_time", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::get_reconstruct_time(const ED_ReconstructTime_Request *req, ED_ReconstructTime_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_get_reconstruct_time(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>> BRPCClient::async_get_reconstruct_time(const ED_ReconstructTime_Request *req)
{
	using RESULT = std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ED_ReconstructTime_Response>("get_reconstruct_time", srpc::RPCAsyncFutureCallback<ED_ReconstructTime_Response>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::BRPCClientTask *BRPCClient::create_Detector_Open_Interface_task(Detector_Open_InterfaceDone done)
{
	return this->create_rpc_client_task("Detector_Open_Interface", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_Detector_Close_Interface_task(Detector_Close_InterfaceDone done)
{
	return this->create_rpc_client_task("Detector_Close_Interface", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_get_reconstruct_time_task(get_reconstruct_timeDone done)
{
	return this->create_rpc_client_task("get_reconstruct_time", std::move(done));
}

inline TRPCClient::TRPCClient(const char *host, unsigned short port):
	srpc::TRPCClient("ElectricalDetector")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::TRPCClient::init(&params);
}

inline TRPCClient::TRPCClient(const struct srpc::RPCClientParams *params):
	srpc::TRPCClient("ElectricalDetector")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::TRPCClient::init(temp);
}

inline void TRPCClient::Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("/ElectricalDetector/Detector_Open_Interface", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Detector_Open_Interface(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<Detector_Open_Response, srpc::RPCSyncContext>> TRPCClient::async_Detector_Open_Interface(const Detector_Open_Request *req)
{
	using RESULT = std::pair<Detector_Open_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<Detector_Open_Response>("/ElectricalDetector/Detector_Open_Interface", srpc::RPCAsyncFutureCallback<Detector_Open_Response>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("/ElectricalDetector/Detector_Close_Interface", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Detector_Close_Interface(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<Detector_Close_Response, srpc::RPCSyncContext>> TRPCClient::async_Detector_Close_Interface(const Detector_Close_Request *req)
{
	using RESULT = std::pair<Detector_Close_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<Detector_Close_Response>("/ElectricalDetector/Detector_Close_Interface", srpc::RPCAsyncFutureCallback<Detector_Close_Response>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::get_reconstruct_time(const ED_ReconstructTime_Request *req, get_reconstruct_timeDone done)
{
	auto *task = this->create_rpc_client_task("/ElectricalDetector/get_reconstruct_time", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::get_reconstruct_time(const ED_ReconstructTime_Request *req, ED_ReconstructTime_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_get_reconstruct_time(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>> TRPCClient::async_get_reconstruct_time(const ED_ReconstructTime_Request *req)
{
	using RESULT = std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ED_ReconstructTime_Response>("/ElectricalDetector/get_reconstruct_time", srpc::RPCAsyncFutureCallback<ED_ReconstructTime_Response>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::TRPCClientTask *TRPCClient::create_Detector_Open_Interface_task(Detector_Open_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("/ElectricalDetector/Detector_Open_Interface", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_Detector_Close_Interface_task(Detector_Close_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("/ElectricalDetector/Detector_Close_Interface", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_get_reconstruct_time_task(get_reconstruct_timeDone done)
{
	auto *task = this->create_rpc_client_task("/ElectricalDetector/get_reconstruct_time", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline TRPCHttpClient::TRPCHttpClient(const char *host, unsigned short port):
	srpc::TRPCHttpClient("ElectricalDetector")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::TRPCHttpClient::init(&params);
}

inline TRPCHttpClient::TRPCHttpClient(const struct srpc::RPCClientParams *params):
	srpc::TRPCHttpClient("ElectricalDetector")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::TRPCHttpClient::init(temp);
}

inline void TRPCHttpClient::Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("Detector_Open_Interface", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::Detector_Open_Interface(const Detector_Open_Request *req, Detector_Open_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Detector_Open_Interface(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<Detector_Open_Response, srpc::RPCSyncContext>> TRPCHttpClient::async_Detector_Open_Interface(const Detector_Open_Request *req)
{
	using RESULT = std::pair<Detector_Open_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<Detector_Open_Response>("Detector_Open_Interface", srpc::RPCAsyncFutureCallback<Detector_Open_Response>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("Detector_Close_Interface", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::Detector_Close_Interface(const Detector_Close_Request *req, Detector_Close_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_Detector_Close_Interface(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<Detector_Close_Response, srpc::RPCSyncContext>> TRPCHttpClient::async_Detector_Close_Interface(const Detector_Close_Request *req)
{
	using RESULT = std::pair<Detector_Close_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<Detector_Close_Response>("Detector_Close_Interface", srpc::RPCAsyncFutureCallback<Detector_Close_Response>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::get_reconstruct_time(const ED_ReconstructTime_Request *req, get_reconstruct_timeDone done)
{
	auto *task = this->create_rpc_client_task("get_reconstruct_time", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::get_reconstruct_time(const ED_ReconstructTime_Request *req, ED_ReconstructTime_Response *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_get_reconstruct_time(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>> TRPCHttpClient::async_get_reconstruct_time(const ED_ReconstructTime_Request *req)
{
	using RESULT = std::pair<ED_ReconstructTime_Response, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ED_ReconstructTime_Response>("get_reconstruct_time", srpc::RPCAsyncFutureCallback<ED_ReconstructTime_Response>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_Detector_Open_Interface_task(Detector_Open_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("Detector_Open_Interface", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_Detector_Close_Interface_task(Detector_Close_InterfaceDone done)
{
	auto *task = this->create_rpc_client_task("Detector_Close_Interface", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_get_reconstruct_time_task(get_reconstruct_timeDone done)
{
	auto *task = this->create_rpc_client_task("get_reconstruct_time", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

} // end namespace ElectricalDetector

